<atom:feed xmlns:atom="http://www.w3.org/2005/Atom">
  <atom:id>http://nathanrosspowell.com/</atom:id>
  <atom:title>nathanrosspowell.com</atom:title>
  <atom:updated>2012-11-09T21:43:11-04:00</atom:updated>
  <atom:link href="http://nathanrosspowell.com/feeds/atom.xml" rel="self"/>

  <atom:author>
    <atom:name>Nathan Ross Powell</atom:name>
    <atom:email>nathanrosspowell@gmail.com</atom:email>
  </atom:author>

  
  <atom:entry>
    <atom:title>Long Time No Update</atom:title>
    <atom:id>http://nathanrosspowell.com/blog/2012/11/09/long-time-no-update/</atom:id>
    <atom:updated>2012-11-09T21:32:21-04:00</atom:updated>
    <atom:link href="http://nathanrosspowell.com/blog/2012/11/09/long-time-no-update/"/>
    <atom:summary>Well the website fell away to rot for a bit... Other things were more important, but today I finish a payyyyss on making it nice and shiny again!</atom:summary>
    <atom:content type="html">
        <![CDATA[ 

        <p>Well the website fell away to rot for a bit... Other things were more important, but today I finished a pass on making it nice and shiny again!</p>
<p>Some effort has gone into fixing the litter errors that crept in last time I tried to optimise the Javascript execution on the pages.
Along with that and a small redesign and palette change we end up here, with what you see before you.</p>
<p>Code wise I have been working on a Linux based SDL powered 'game engine'. 
A typical task for most programmers, and I'm falling into the classic gotchas of over engineering things yadda yadda - end of the day, it's fun.
This is currently in one of my private githuv repros, but it will surface as soon as some kind of tech demo is working.</p>
<p>As usual I'm updating my site as a gust of enthusiasm has taken over me. Not sure how long it will last.</p>
<p>This post was brough to you by: Beer.</p>
        <p><a title="Comments" href="http://nathanrosspowell.com/blog/2012/11/09/long-time-no-update/#disqus_thread">Comments</a></p>

        ]]>
    </atom:content>
    <atom:category term="blog"/>
    <atom:category term="update"/>
    
  </atom:entry>
  
  <atom:entry>
    <atom:title>Functional One Liner</atom:title>
    <atom:id>http://nathanrosspowell.com/blog/2012/08/15/functional-one-liner/</atom:id>
    <atom:updated>2012-08-15T23:06:56-04:00</atom:updated>
    <atom:link href="http://nathanrosspowell.com/blog/2012/08/15/functional-one-liner/"/>
    <atom:summary>A little Project Euler solution that I&#39;m fond of. I&#39;m also currently taking a smallish python script and trying to make it into a more full featured program with a GUI.</atom:summary>
    <atom:content type="html">
        <![CDATA[ 

        <p>I'd like to share a Project Euler solution <a href="#solution" title="If you manage to reverse engineer the code and figure out which problem this is the solution too, SPOILER ALERT, I guess...">(I'll not say which)*</a> that I am particularly fond of. Like all true wonders of code, it is a mighty one liner:</p>
<div class="codehilite"><pre><span class="nb">sum</span><span class="p">(</span> <span class="nb">map</span><span class="p">(</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span> <span class="nb">reduce</span><span class="p">(</span> <span class="n">operator</span><span class="o">.</span><span class="n">mul</span><span class="p">,</span> <span class="nb">xrange</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">101</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
</pre></div>


<p>While I'm still very much a novice with functional programming, I'm using a few tricks that I picked up when I last sat down and tried to <a href="http://learnyouahaskell.com/" title="Learn You a Haskell for Great Good">'Learn <em>me</em> a Haskell'</a> by using a range generator, folds and an ananonymous function.</p>
<p>I managed to power through a couple of the easier P.E problems a few ahead of my current sticking point, using the python language. It made me want to try and do something a little more <strong>useful</strong> with the language. Enter the last big python <a href="https://gist.github.com/2603334" title="Gist powered by Github">gist</a> I created <code>podcast.py</code> - a crued but configurable mass podcast downloader.</p>
<h3><a href="https://gist.github.com/2603334#file_podcast.py" title="podcast.py - Gist powered by GitHub"><code>podcast.py</code></a></h3>
<div class="codehilite"><pre><span class="c"># Snippet from jumbo file podcast.py</span>

<span class="k">def</span> <span class="nf">downloadAll</span><span class="p">(</span> <span class="n">newDict</span><span class="p">,</span> <span class="n">priority</span><span class="p">,</span> <span class="n">verbose</span><span class="p">,</span> <span class="n">dryRun</span> <span class="p">):</span>
    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">priority</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">newDict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span> <span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">value</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">print</span> <span class="s">&quot;Downloading </span><span class="si">%s</span><span class="s"> from: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span> <span class="nb">len</span><span class="p">(</span> <span class="n">value</span> <span class="p">),</span> <span class="n">key</span> <span class="p">)</span>
        <span class="n">value</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">v</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span> <span class="s">&quot;date&quot;</span> <span class="p">]</span> <span class="p">)</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">value</span><span class="p">:</span>
            <span class="n">download</span><span class="p">(</span> <span class="n">item</span><span class="p">[</span> <span class="s">&quot;url&quot;</span> <span class="p">],</span> <span class="n">item</span><span class="p">[</span> <span class="s">&quot;fullFilePath&quot;</span> <span class="p">],</span> <span class="n">verbose</span><span class="p">,</span> <span class="n">dryRun</span> <span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span> <span class="n">xmlFile</span><span class="p">,</span> <span class="n">verbose</span><span class="p">,</span> <span class="n">dryRun</span> <span class="p">):</span>
    <span class="n">settings</span><span class="p">,</span> <span class="n">priority</span> <span class="o">=</span> <span class="n">getSettingsAndPriority</span><span class="p">(</span> <span class="n">xmlFile</span> <span class="p">)</span>
    <span class="n">newFiles</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">settings</span><span class="p">[</span> <span class="s">&quot;feeds&quot;</span> <span class="p">]</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
        <span class="n">new</span> <span class="o">=</span> <span class="n">listNewFiles</span><span class="p">(</span> <span class="n">settings</span><span class="p">[</span> <span class="s">&quot;folder&quot;</span> <span class="p">],</span> <span class="n">value</span> <span class="p">)</span>
        <span class="k">if</span> <span class="n">new</span> <span class="o">!=</span> <span class="p">[]:</span>
            <span class="n">newFiles</span><span class="p">[</span> <span class="n">key</span> <span class="p">]</span> <span class="o">=</span> <span class="n">new</span>
    <span class="k">if</span> <span class="n">newFileStatus</span><span class="p">(</span> <span class="n">newFiles</span><span class="p">,</span> <span class="n">priority</span><span class="p">,</span> <span class="n">verbose</span> <span class="p">):</span>
        <span class="n">downloadAll</span><span class="p">(</span> <span class="n">newFiles</span><span class="p">,</span> <span class="n">priority</span><span class="p">,</span> <span class="n">verbose</span><span class="p">,</span> <span class="n">dryRun</span> <span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;Usage: &lt;podcast: xml file&gt; &lt;verbose: 1 or 0&gt; &lt;dryrun: 1 or 0&gt;&quot;</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">podcastXML</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">verbose</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">verbose</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">dryRun</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">3</span> <span class="p">]</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">dryRun</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">main</span><span class="p">(</span> <span class="n">podcastXML</span><span class="p">,</span> <span class="n">verbose</span><span class="p">,</span> <span class="n">dryRun</span> <span class="p">)</span>
</pre></div>


<p>Being very anti-iTunes (due to it being a system resource hog) and failing to find a suitable alternative for 'managing' podcasts I decided to grab the favorite feeds straight from the source and download ALL the things at once. Running the script whenever I booted my computer to get all the latest audio treats for myself to keep.</p>
<p>An example of my config that powered the script (note the embeded python code used to format the titles!).</p>
<h3><a href="https://gist.github.com/2603334#file_podcast.xml" title="podcast.xml - Gist powered by GitHub"><code>podcast.xml</code></a></h3>
<div class="codehilite"><pre><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;podcast&gt;</span>
    <span class="c">&lt;!-- Root folder to download to. --&gt;</span>
    <span class="nt">&lt;folder</span> <span class="na">value=</span><span class="s">&quot;Z:\Media\Podcast\&quot;</span> <span class="nt">/&gt;</span>
    <span class="c">&lt;!-- RSS feeds to download, listed highest priority to lowest. </span>
<span class="c">        Fields to set:</span>
<span class="c">            name= print out name of the feed </span>
<span class="c">            folder= sub folder used</span>
<span class="c">            rss= RSS URI</span>
<span class="c">        Optional Fields:</span>
<span class="c">            seperator= &#39;-&#39;</span>
<span class="c">            space= &#39;_&#39;</span>
<span class="c">            dateFormat= how the datetime will be displayed</span>
<span class="c">            nameFormat= tuple for custom file name format: %s+seperator+%s</span>
<span class="c">                        can use title (string) and dateFormat (string)</span>
<span class="c">                        e.g &quot;JRE+title, dateFormat</span>
<span class="c">    --&gt;</span>
    <span class="nt">&lt;feeds&gt;</span>
        <span class="nt">&lt;feed</span> <span class="na">name=</span><span class="s">&quot;Lavender Hour&quot;</span> 
              <span class="na">folder=</span><span class="s">&quot;Lavender Hour&quot;</span> 
              <span class="na">rss=</span><span class="s">&quot;http://lavenderhour.libsyn.com/rss&quot;</span>
              <span class="na">nameFormat=</span><span class="s">&quot;dateFormat, title&quot;</span>
              <span class="na">dateFormat=</span><span class="s">&quot;%Y-%m-%d&quot;</span>
        <span class="nt">/&gt;</span>
        <span class="nt">&lt;feed</span> <span class="na">name=</span><span class="s">&quot;Joe Rogan Experience&quot;</span> 
              <span class="na">folder=</span><span class="s">&quot;JRE&quot;</span> 
              <span class="na">rss=</span><span class="s">&quot;http://joeroganexp.joerogan.libsynpro.com/irss&quot;</span>
              <span class="na">nameFormat=</span><span class="s">&quot;title[ title.find(&#39;#&#39;)+1: ], dateFormat&quot;</span>
        <span class="nt">/&gt;</span>
    <span class="nt">&lt;/feeds&gt;</span>
<span class="nt">&lt;/podcast&gt;</span>
</pre></div>


<p>After not looking at the actual script for a good few months I totally forget how I wired it up and <strong>oh my GLOB</strong>... debugging python scripts is about as much fun as ironing wrinkly parts of your body. After a few hours of self.torture I managed to split up core parts of the functionality with the final aim of using the code inside of an actual GUI of some kind. The functionality I'd like would be to pick (or filter) the podcasts that I download instead of just ending up with tens of GBs of files sitting on my NAS.</p>
<p>So, I'm learning about real world <em>best practices</em> for python and also looking into the Qt/PySide GUI framework. Look out for an operational <a href="https://github.com/nathanrosspowell/pycast">PyCast</a> <s>app</s> program some time soon!</p>
<p><a id="solution"></a></p>
<p><em>*if you manage to reverse engineer the code and figure out which problem this is the solution to, SPOILER ALERT, I guess...</em></p>
        <p><a title="Comments" href="http://nathanrosspowell.com/blog/2012/08/15/functional-one-liner/#disqus_thread">Comments</a></p>

        ]]>
    </atom:content>
    <atom:category term="project-euler"/>
    <atom:category term="python"/>
    <atom:category term="gui"/>
    <atom:category term="functional"/>
    <atom:category term="programming"/>
    <atom:category term="pycast"/>
    
  </atom:entry>
  
  <atom:entry>
    <atom:title>Project Euler</atom:title>
    <atom:id>http://nathanrosspowell.com/blog/2012/08/07/project-euler/</atom:id>
    <atom:updated>2012-08-07T21:26:35+00:00</atom:updated>
    <atom:link href="http://nathanrosspowell.com/blog/2012/08/07/project-euler/"/>
    <atom:summary>An update to the compilers used in my Project Euler testbed</atom:summary>
    <atom:content type="html">
        <![CDATA[ 

        <p>I've just update the test code for my <a href="http://github.com/nathanrosspowell/euler" title="Project Euler on GitHub">Project Euler</a> testing scripts. Now a list of <code>Execute</code> classes will run on each language implementation. I've started by adding Clang to the GCC tests.</p>
<p><a href="http://imgur.com/WOllJ"><img class="article" src="http://i.imgur.com/WOllJ.png" alt="" title="run.py working it's magic on CPP 2 and 11" /></a></p>
<p>Also I stopped the nasty red <em>ERROR</em> messages for files that exist when there is an answer for that problem, but it's not finished in a specific language (problem 11 is only sloved in <code>python</code> currently).</p>
<p>Time to get cracking on the next problem, currently <a href="http://projecteuler.net/problem=15" title="Project Euler problem 15">PE15</a> (I've got up to PE16, but only after I chickened out on PE15...)</p>
<p>See my <code>code</code> page <a href="http://nathanrosspowell.com/code/project-euler" title="NRP - Code - Project Euler">here</a>.</p>
        <p><a title="Comments" href="http://nathanrosspowell.com/blog/2012/08/07/project-euler/#disqus_thread">Comments</a></p>

        ]]>
    </atom:content>
    <atom:category term="project-euler"/>
    <atom:category term="c++"/>
    <atom:category term="bash"/>
    <atom:category term="linux"/>
    
  </atom:entry>
  
  <atom:entry>
    <atom:title>Hello, Montreal. Hello, Ubisoft!</atom:title>
    <atom:id>http://nathanrosspowell.com/blog/2012/08/05/hello-montral-hello-ubisoft/</atom:id>
    <atom:updated>2012-08-05T21:16:12+00:00</atom:updated>
    <atom:link href="http://nathanrosspowell.com/blog/2012/08/05/hello-montral-hello-ubisoft/"/>
    <atom:summary>Preperation for my latest &#39;first day&#39; as I start work for Ubisoft Montréal</atom:summary>
    <atom:content type="html">
        <![CDATA[ 

        <p>So tomorrow is the start of a new chapter in my career and life as I will be starting work at Ubisoft Montréal on the muchly anticipated Watch_Dogs video game.</p>
<p>I've been in the country for a couple of days now and have just about adapted to the time and the heat.</p>
<p><a href="http://imgur.com/4X0wz">
<img class="article" title="Downtown Montréal from the 15th floor of the Trylon" src="http://i.imgur.com/9Vsiu.jpg" alt=""/>
</a></p>
<p>Not much else to say for now other than my French is embarrassingly terrible and I feel like a total dingus whenever I try and converse with a Francophone. Time to see if there is any crossover from being multi-lingual in programming languages...</p>
        <p><a title="Comments" href="http://nathanrosspowell.com/blog/2012/08/05/hello-montral-hello-ubisoft/#disqus_thread">Comments</a></p>

        ]]>
    </atom:content>
    <atom:category term="life"/>
    <atom:category term="ubisoft"/>
    <atom:category term="montreal"/>
    <atom:category term="picture"/>
    
  </atom:entry>
  
  <atom:entry>
    <atom:title>Syntax Highlight Test</atom:title>
    <atom:id>http://nathanrosspowell.com/blog/2012/08/04/syntax-highlight-test/</atom:id>
    <atom:updated>2012-08-04T00:44:54+00:00</atom:updated>
    <atom:link href="http://nathanrosspowell.com/blog/2012/08/04/syntax-highlight-test/"/>
    <atom:summary>This is the test for code syntax highlighting from markdown source.</atom:summary>
    <atom:content type="html">
        <![CDATA[ 

        <p>This is the test for code syntax highlighting from markdown source.</p>
<p>Goodbye world in <a href="http://rosettacode.org/wiki/Hello_world#BASIC">BASIC</a>:</p>
<div class="codehilite"><pre>10 <span class="n">PRINT</span> &quot;<span class="n">Goodbye</span><span class="p">,</span> <span class="n">World</span>!&quot;
</pre></div>


<p>Fibonacci sequence in <a href="http://rosettacode.org/wiki/Fibonacci_sequence#Python">python</a>:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">fibRec</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">n</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">fibRec</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibRec</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</pre></div>


<p>Sieve of Eratosthenes in <a href="http://rosettacode.org/wiki/Sieve_of_Eratosthenes#C.2B.2B">C++</a>:</p>
<div class="codehilite"><pre><span class="c1">// yield all prime numbers less than limit. </span>
<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">UnaryFunction</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="n">primesupto</span><span class="p">(</span><span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">UnaryFunction</span> <span class="n">yield</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">limit</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

  <span class="k">const</span> <span class="kt">int</span> <span class="n">sqrt_limit</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">limit</span><span class="p">));</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="n">sqrt_limit</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">[</span><span class="n">n</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">yield</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="n">k</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="n">ulim</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">ulim</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="n">n</span><span class="p">)</span> 
      <span class="c1">//NOTE: &quot;unsigned&quot; is used to avoid an overflow in `k+=n` for `limit` near INT_MAX</span>
      <span class="n">is_prime</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sqrt_limit</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
    <span class="n">yield</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
        <p><a title="Comments" href="http://nathanrosspowell.com/blog/2012/08/04/syntax-highlight-test/#disqus_thread">Comments</a></p>

        ]]>
    </atom:content>
    <atom:category term="code"/>
    <atom:category term="test"/>
    <atom:category term="python"/>
    <atom:category term="c++"/>
    <atom:category term="basic"/>
    
  </atom:entry>
  
  <atom:entry>
    <atom:title>Hello, World!</atom:title>
    <atom:id>http://nathanrosspowell.com/blog/2012/07/03/hello-world/</atom:id>
    <atom:updated></atom:updated>
    <atom:link href="http://nathanrosspowell.com/blog/2012/07/03/hello-world/"/>
    <atom:summary>This is the first blog entry onto my newly made website.</atom:summary>
    <atom:content type="html">
        <![CDATA[ 

        <p>This is the first <em>blog</em> entry onto my newly made website. I'm not sure what is going to end up on this page, but hopefully it will be a means to communicate my hobby code to the wider world.</p>
<p>I've got a comment system working (<a href="http://disqus.com" title="Disqus commenting">Disqus</a>) and the next thing to add is code highlighting. A filter for <em>tags</em> needs to be set up for all of the blog conntent and finally, the style could do with some work, but this is as nice as a v0.1 as any.</p>
        <p><a title="Comments" href="http://nathanrosspowell.com/blog/2012/07/03/hello-world/#disqus_thread">Comments</a></p>

        ]]>
    </atom:content>
    <atom:category term="update"/>
    
  </atom:entry>
  
</atom:feed>